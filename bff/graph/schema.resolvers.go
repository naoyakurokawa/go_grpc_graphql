package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"log"

	"github.com/naoyakurokawa/go_grpc_graphql/graph/model"
	pb "github.com/naoyakurokawa/go_grpc_graphql_proto/pb"
	"google.golang.org/protobuf/types/known/emptypb"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.NewTask) (*model.Task, error) {
	// gRPCリクエストの作成
	req := &pb.CreateTaskRequest{
		Input: &pb.NewTask{
			Title: input.Title,
			Note:  input.Note,
		},
	}

	// gRPCサーバーにリクエストを送信
	res, err := r.GrpcClient.CreateTask(ctx, req)
	if err != nil {
		log.Printf("failed to create task: %v", err)
		return nil, err
	}

	// gRPCのレスポンスをGraphQLのレスポンスに変換
	return &model.Task{
		ID:        res.Id,
		Title:     res.Title,
		Note:      res.Note,
		Completed: res.Completed,
		CreatedAt: res.CreatedAt.AsTime().Format("2006-01-02 15:04:05"),
		UpdatedAt: res.UpdatedAt.AsTime().Format("2006-01-02 15:04:05"),
	}, nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, input model.UpdateTask) (*model.Task, error) {
	req := &pb.UpdateTaskRequest{
		Input: &pb.UpdateTask{
			Id:        input.ID,
			Title:     "",
			Note:      "",
			Completed: 0,
		},
	}

	// Optional fields
	if input.Title != nil {
		req.Input.Title = *input.Title
	}
	if input.Note != nil {
		req.Input.Note = *input.Note
	}
	if input.Completed != nil {
		req.Input.Completed = int32(*input.Completed)
	}

	res, err := r.GrpcClient.UpdateTask(ctx, req)
	if err != nil {
		log.Printf("failed to update task: %v", err)
		return nil, err
	}

	return &model.Task{
		ID:        res.Id,
		Title:     res.Title,
		Note:      res.Note,
		Completed: res.Completed,
		CreatedAt: res.CreatedAt.AsTime().Format("2006-01-02 15:04:05"),
		UpdatedAt: res.UpdatedAt.AsTime().Format("2006-01-02 15:04:05"),
	}, nil
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (bool, error) {
	req := &pb.TaskId{Id: id}
	res, err := r.GrpcClient.DeleteTask(ctx, req)
	if err != nil {
		log.Printf("failed to delete task: %v", err)
		return false, err
	}

	return res.Success, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	req := &emptypb.Empty{}

	res, err := r.GrpcClient.GetTasks(ctx, req)
	if err != nil {
		log.Printf("failed to fetch tasks: %v", err)
		return nil, err
	}

	var tasks []*model.Task
	for _, task := range res.Tasks {
		tasks = append(tasks, &model.Task{
			ID:        task.Id,
			Title:     task.Title,
			Note:      task.Note,
			Completed: task.Completed,
			CreatedAt: task.CreatedAt.AsTime().Format("2006-01-02 15:04:05"),
			UpdatedAt: task.UpdatedAt.AsTime().Format("2006-01-02 15:04:05"),
		})
	}

	return tasks, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
